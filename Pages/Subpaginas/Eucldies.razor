@page "/ferramentas/euclides"
@using System.ComponentModel

@inject IPrincipal _principal

<MudText Typo="Typo.h4">@(conta == "inverso" ? "Inverso modular" : (conta == "linear" ? "Combinação linear" : "Congruência linear")) utilizando euclides estendido</MudText>

<MudItem Style="display: flex">
    <div style="width: 300px; margin-right: 10px">
        <MudTextField Style="margin-right: 10px" T="string" @bind-Text="@Txt" DebounceInterval="300" OnDebounceIntervalElapsed="@(() => Gerar())" OnKeyUp="@TxtEnter" Label="Números" Variant="Variant.Outlined"></MudTextField>
    </div>
    <div style="width: 170px; margin-right: 10px">
        <MudSelect T="string" Label="Modo" @bind-Value="@conta" OnKeyUp="@(() => Gerar(true))">
            <MudSelectItem T="string" Value="@("linear")">Combinação linear</MudSelectItem>
            <MudSelectItem T="string" Value="@("inverso")">Inverso modular</MudSelectItem>
            <MudSelectItem T="string" Value="@("congruencia")">Congruência linear</MudSelectItem>
        </MudSelect>
    </div>
    <MudButton Color="Color.Dark" Variant="Variant.Filled" Size="Size.Large" OnClick="@(() => Gerar(true))">Calcular</MudButton>
</MudItem>

@if (conta == "linear")
{
    @if (result.x != -24102003)
    {
        <MudText Typo="Typo.h6">@result.mdc = @result.x*@result.a @(result.y >= 0 ? "+" :"") @result.y*@result.b</MudText>
    }
}
else if(conta == "inverso")
{
    @if (result.inverso.existe)
    {
        <MudText Typo="Typo.h6">O inverso de @result.a (mod @result.b) é @result.inverso.valor</MudText>
    }
    else
    {
        @if (result.mdc != 1 && result.x != -24102003)
        {
            <MudText Typo="Typo.h6">@result.a e @result.b não são primos entre si! MDC: @result.mdc</MudText>
        }
    }
}
else
{
    //@if (result.inverso.existe)
    //{
    @foreach(var congruencia in result.congruencias)
        if (congruencia.existe)
        {
            <MudText Typo="Typo.h6">@result.a*@congruencia.xCongruencia ≡ @congruencia.congruencia (mod @result.b)</MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">Não existem soluções</MudText>
        }
    
    @if (result.congruencias.Count == 0)
    {
        <MudText Typo="Typo.h6">Não existem soluções</MudText>
    }
    //}
    //else
    //{
    //    <MudText Typo="Typo.h6">@result.a e @result.b não são primos entre si! MDC: @result.mdc</MudText>
    //}
}

@code{

    //string Titulo = "Combinação linear";
    string Txt = "";
    string conta = "linear";

    bool changed = true;
    
    Result result = new Result();

    public class Result
    {
        public long x = -24102003;
        public long y = -1;
        public long mdc = -1;
        public long a = -1;
        public long b = -1;
        public dynamic inverso = new {valor=-1,existe=false};
        public List<Congruencia> congruencias = new List<Congruencia>();

        public class Congruencia
        {
            public long congruencia = -1;
            public long xCongruencia = -1;
            public bool existe = false;
            public long b = -1;
            public long a = -1;

            public Congruencia(long Con, long X, bool Existe, long? A=null, long? B=null)
            {
                xCongruencia = X;
                congruencia = Con;
                existe = Existe;
                b = B ?? -1;
                a = A ?? -1;
            }
        }
        
        public Result(long X, long Y, long MDC, long A, long B, dynamic Inverso=null, List<Congruencia> _Congs=null)
        {
            x = X;
            y = Y;
            mdc = MDC;
            a = A;
            b = B;
            inverso = Inverso ?? new {valor=-1,existe=false};
            congruencias = _Congs ?? new List<Congruencia>();
        }
        
        public Result(){}
    }

    void Gerar(bool? force=null)
    {
        changed = force ?? changed;
        if (changed)
        {
            try
            {
                if (conta == "linear")
                {
    //Console.WriteLine($"Irei calcular: {Txt}");
                    string[] spl = Txt.Split(",");
                    result.a = long.Parse(spl[0]);
                    result.b = long.Parse(spl[1]);
                    dynamic r = _principal.EuclidesEstendido(result.a, result.b, operacao: "linear");
                    result = new Result(r.x, r.y, r.mdc, r.a, r.b);
                    InvokeAsync(StateHasChanged);

                }
                else if (conta == "inverso")
                {
                    string[] spl = Txt.Split(",");
                    result.a = long.Parse(spl[0]);
                    result.b = long.Parse(spl[1]);
                    dynamic r = _principal.EuclidesEstendido(result.a, result.b, operacao: "inverso");
                    result = new Result(r.x, r.y, r.mdc, r.a, r.b, Inverso: r.inverso);
                    Console.WriteLine($"y: {result.y} b:{result.b}");
                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    string[] splSides = Txt.Split("≡");
                    long a = long.Parse(splSides[0].Replace("x", ""));
                    long b = long.Parse(splSides[1].Split("mod")[1]);
                    long congruencia = long.Parse(splSides[1].Split("mod")[0]);

                    dynamic conv = _principal.EuclidesEstendido(a, b, operacao: "congruencia", congruencia: congruencia);
                    Result r = new Result(conv.x,conv.y,conv.mdc,conv.a,conv.b,Inverso:conv.inverso,_Congs:conv.congruencias);
                    result = r;
                    Console.WriteLine($"to loco meu ermao {result.congruencias.Count}");
                    InvokeAsync(StateHasChanged);
                }

                changed = false;

            }
            catch(Exception e)
            {
                changed = false;
                Console.WriteLine(e);
                //throw new WarningException("Error ao tentar executar por handle bound");

            }
            
        }
    }
    

    async void TxtEnter(KeyboardEventArgs e)
    {
        //if(e.Key.ToLower() == "enter") Gerar();
        changed = true;
        if (Txt.Contains("="))
        {
            Txt = Txt.Replace("=", "≡");
            await InvokeAsync(StateHasChanged);
        }
        
    }
    
}